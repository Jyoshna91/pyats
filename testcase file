from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging
import pdb
from pyats.results import Passed,Failed
from pyats.async_.exceptions import *
from acl_lib import acl_common_functions
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
import time
global device_list

#easypy job_file -t testbed_yaml_file -datafile datafile

class CommonSetup(aetest.CommonSetup):

    @aetest.subsection
    def print_testbed_information(self,testbed):
        pdb.set_trace()
        global uut1,uut2,uut3,device_list,device_info
        uut1 = testbed.devices['dut1']
        self.parent.parameters.update(uut1 = uut1)
        uut2 = testbed.devices['dut3']
        self.parent.parameters.update(uut2 = uut2)
        uut3 = testbed.devices['dut2']
        self.parent.parameters.update(uut3 = uut3)

        device_list = [uut1,uut2,uut3]
        device_info = {}

        if not testbed:
            logging.info("No testbed was provided to script launch")
        else:
            uut = testbed.devices['dut1']
            for device in testbed:
                logging.info("Device name : %s "%device.name)
                device_info.update({device.name: []})
                for intf in device:
                   logging.info("Interface : %s"%intf.name)
                   device_info[device.name].append(intf.name)
                   if intf.link:
                       logging.info("Link : %s"%intf.link.name)
                   else:
                       logging.info("Link : None")
            logger.info("Device and interfaces used for acl feature")
            logger.info(device_info)

    @aetest.subsection
    def connect_to_devices(self,testbed):
        logger.info("Connecting to devices")
        pdb.set_trace()
        for uut in device_list:
            uut.connect()
            if uut.is_connected() == True:
                logging.info("Successfully connected to device %s"%uut.name)
                output = uut.execute('show version')
                res = acl_common_functions.sh_version(output)
                logging.info("Software version :%s"%res['version'])
                logging.info("Image File :%s"%res['image'])
            else:
                logging.info("Device %s not connected"%uut.name)

    @aetest.subsection
    def configure_ip_address_to_interfaces(self,testbed):
        logger.info("Assign ip address to interfaces")
        pdb.set_trace()
        logger.info(device_info.keys())
        #for dev in device_info.keys():
        acl_common_functions.configure_ip_address(uut1,device1['intf'],device1['ip_address'],subnet_mask)
        acl_common_functions.configure_ip_address(uut2,device2['intf1'],device2['ip_address1'],subnet_mask)
        acl_common_functions.configure_ip_address(uut2,device2['intf2'],device2['ip_address2'],subnet_mask)
        acl_common_functions.configure_ip_address(uut3,device3['intf'],device3['ip_address'],subnet_mask)

    @aetest.subsection
    def enable_rip_on_device(self,testbed):
        logging.info("Enable rip on devices")
        for uut in device_list:
            acl_common_functions.enable_rip(uut)

    @aetest.subsection
    def configure_rip_on_devices(self,testbed):
        logger.info("Configure rip on interfaces")
        acl_common_functions.configure_rip(uut1,device1['intf'])
        acl_common_functions.configure_rip(uut2,device2['intf1'])
        acl_common_functions.configure_rip(uut2,device2['intf2'])
        acl_common_functions.configure_rip(uut3,device3['intf'])

#@aetest.skip("testing fourth scenario")
class acl_testcase_configured(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self, testbed):
        logger.info("Configure ACL on device1: {}".format(uut1.name))
        acl_name = "acl1"
        acl_common_functions.configure_acl(uut1, acl_name, rule2)



    @aetest.test
    def check_ping_after_deny_acl(self, testbed):
        pdb.set_trace()
        logger.info("Check acl configured or not ")
        acl_config = uut1.execute("show access-list {}".format(acl_name))
        #logger.info(acl_config)
        acl_pattern = r'\b[a-zA-Z]+\W+[a-zA-Z]+\W+[a-zA-Z]+\W+[a-zA-Z]+[0-9]\b'
        match = re.search(acl_pattern, acl_config)

        if match:
            acl_name_found = match.group(0)
            logger.info("ACL {} configured on device".format(acl_name_found))

        else:
            logger.info("ACL is not configured on device")
            self.errored('ACL is not configured on device')
            logger.info("Ping the IP configured on device2: {}".format(uut3.name))
        for i in range(3):
            result = uut1.execute("ping {}".format(device3['ip_address']))
            ping_pattern = r"(\d+) packets transmitted, (\d+) packets received, (\d+)% packet loss"
            ping_match = re.search(ping_pattern, result)

            if ping_match:
                sent_pkt, received_pkt, pkt_loss = map(int, ping_match.groups())
                logger.info("Sent: {} packets and received: {} packets and packet loss: {}%".format(sent_pkt, received_pkt, pkt_loss))

                if sent_pkt != received_pkt and pkt_loss == 100:
                    self.passed("Success: After applied deny rule for ACL, ping got failed")
                else:
                    logger.error("Failed to parse ping result")

    @aetest.cleanup
    def unconfigure_acl_on_device(self, testbed):
        logger.info("Unconfigure ACL on device3: {}".format(uut1.name))
        acl_name = "acl1"
        acl_common_functions.unconfigure_acl(uut1, acl_name)




class CommonCleanup(aetest.CommonCleanup):

    @aetest.subsection
    def unconfigure_rip_on_devices(self,testbed):
        logger.info("Unconfigure rip on interfaces")
        acl_common_functions.unconfigure_rip(uut1,device1['intf'])
        acl_common_functions.unconfigure_rip(uut2,device2['intf1'])
        acl_common_functions.unconfigure_rip(uut2,device2['intf2'])
        acl_common_functions.unconfigure_rip(uut3,device3['intf'])

    @aetest.subsection
    def disable_rip_on_device(self,testbed):
        logging.info("disable rip on devices")
        for uut in device_list:
            acl_common_functions.disable_rip(uut)

    @aetest.subsection
    def unconfigure_ipaddress_device(self,testbed):
        logging.info("Unconfig ip address on interfaces of all devices")
        acl_common_functions.unconfigure_ip_address(uut1,device1['intf'])
        acl_common_functions.unconfigure_ip_address(uut2,device2['intf1'])
        acl_common_functions.unconfigure_ip_address(uut2,device2['intf2'])
        acl_common_functions.unconfigure_ip_address(uut3,device3['intf'])

    @aetest.subsection
    def disconnect(self,testbed):
        logger.info("Disconnect the devices")
        for uut in device_list:
            uut.disconnect()


if __name__ == '__main__':
    import argparse
    from pyats.topology import loader

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest = 'testbed',
                        type = loader.load)

    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))
